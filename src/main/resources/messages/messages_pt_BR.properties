NotBlank={0} é obrigatório
NotNull={0} é obrigatório
PositiveOrZero={0} deve ser um valor maior ou igual a zero
Email={0} deve ser um endereço de e-mail válido
Multiplo={0} deve ser um valor múltiplo de {1}
ValorZeroIncluiDescricao={1} deve conter {2}
typeMismatch.java.time.OffsetDateTime={0} deve ser uma data/hora válida
typeMismatch.java.lang.Long={0} deve ser um número válido

welcome=Welcome
required=is required
notFound=has not been found
duplicate=is already in use
nonNumeric=must be all numeric
duplicateFormSubmission=Duplicate form submission is not allowed
typeMismatch.date=invalid date
typeMismatch.birthDate=invalid date

#########################################
# Customização das entidades
########################################

#Usuario
socio.numeroSocio=Número do Sócio

#Estado
estadoInput.id=Código do estado
estadoInput.nome=Nome do estado

#Cidade
cidadeInput.nome=Nome da cidade
cidadeInput.estado=Estado da cidade

#Forma Pagamento
formaPagamento.id=Código da forma de pagamento
NotBlank.formaPagamentoInput.descricao={0} é obrigatória
formaPagamentoInput.id=Código da forma de pagamento
formaPagamentoInput.descricao=Descrição da forma de pagamento

# Endereco
endereco=Endereço
endereco.numero=Número do logradouro
endereco.cidade=Cidade
endereco.cidade.id=Código da cidade
endereco.cep=CEP
endereco.bairro=Bairro

#Grupo
grupoInput.nome=Nome do grupo

#Usuario
NotBlank.usuarioComSenhaInput.senha={0} é obrigatória
usuarioComSenhaInput.nome=Nome do usuário
usuarioComSenhaInput.email=E-mail do usuário
usuarioComSenhaInput.senha=Senha do usuário

NotBlank.usuarioInput.senha={0} é obrigatória
usuarioInput.nome=Nome do usuário
usuarioInput.email=E-mail do usuário

NotBlank.senhaInput.senhaAtual={0} é obrigatória
NotBlank.senhaInput.novaSenha={0} é obrigatória
senhaInput.senhaAtual=Senha atual
senhaInput.novaSenha=Nova senha




#Pedido
NotNull.pedidoInput.itens.produtoId=Código do produto no item é obrigatório
NotNull.pedidoInput.itens.quantidade=Quantidade no item é obrigatório
Size.pedidoInput.itens=O pedido deve ter pelo menos um item
pedidoInput.restaurante=Restaurante
pedidoInput.formaPagamento=Forma de pagamento
pedidoInput.enderecoEntrega=Endereço de entrega
pedidoInput.itens=Itens do pedido
enderecoEntrega.logradouro=Logradouro do endereço de entrega
enderecoEntrega.numero=Número do logradouro do endereço de entrega
enderecoEntrega.cidade=Cidade do endereço de entrega
enderecoEntrega.cidade.id=Código da cidade do endereço de entrega
enderecoEntrega.cep=CEP do endereço de entrega
enderecoEntrega.bairro=Bairro do endereço de entrega

# Pedido Filter
pedidoFilter.dataCriacaoInicio=Data inicial de criação do pedido
pedidoFilter.dataCriacaoFim=Data final de criação do pedido
pedidoFilter.clienteId=Código do cliente
pedidoFilter.restauranteId=Código do restaurante

#############################################
# Customização das entidades da API / FIM
#############################################


#após configuração do ValidationConfig é possível usar as validações do ValidationMessages.properties, que é o arquivo
#usado para customizar propriedades do bean validation. Exemplo de uso: @PositiveOrZero (message = "{TaxaFrete.invalida}")
#(9.14 - Usando o Resource Bundle do Spring como Resource Bundle do Bean Validation)
#A configuração do ValidationConfig unifica os arquivos ValidationMessages e messages :)
jakarta.validation.constraints.PositiveOrZero.message=deve ser um número positivo
TaxaFrete.invalida=Taxa frete está inválida, informe um valor positivo



